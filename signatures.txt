long read(unsigned int fd, char __user *buf, size_t count);
long write(unsigned int fd, const char __user *buf, size_t count);
long open(const char __user *filename, int flags, umode_t mode);
long close(unsigned int fd);
long newstat(const char __user *filename, struct stat __user *statbuf);
long newfstat(unsigned int fd, struct stat __user *statbuf);
long newlstat(const char __user *filename, struct stat __user *statbuf);
long poll(struct pollfd __user *ufds, unsigned int nfds, int timeout);
long lseek(unsigned int fd, off_t offset, unsigned int whence);
long mmap_pgoff(unsigned long addr, unsigned long len, unsigned long prot, unsigned long flags, unsigned long fd, unsigned long pgoff);
long mprotect(unsigned long start, size_t len, unsigned long prot);
long munmap(unsigned long addr, size_t len);
long brk(unsigned long brk);
long rt_sigaction(int, const struct sigaction __user *, struct sigaction __user *, size_t);
long rt_sigprocmask(int how, sigset_t __user *set, sigset_t __user *oset, size_t sigsetsize);
long setup(unsigned nr_reqs, aio_context_t __user *ctx);
long ioctl(unsigned int fd, unsigned int cmd, unsigned long arg);
long pread64(unsigned int fd, char __user *buf, size_t count, loff_t pos);
long pwrite64(unsigned int fd, const char __user *buf, size_t count, loff_t pos);
long readv(unsigned long fd, const struct iovec __user *vec, unsigned long vlen);
long writev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen);
long access(const char __user *filename, int mode);
long pipe(int __user *fildes);
long select(int n, fd_set __user *inp, fd_set __user *outp, fd_set __user *exp, struct __kernel_old_timeval __user *tvp);
long sched_yield(void);
long mremap(unsigned long addr, unsigned long old_len, unsigned long new_len, unsigned long flags, unsigned long new_addr);
long msync(unsigned long start, size_t len, int flags);
long mincore(unsigned long start, size_t len, unsigned char __user * vec);
long madvise(unsigned long start, size_t len, int behavior);
long shmget(key_t key, size_t size, int flag);
long shmat(int shmid, char __user *shmaddr, int shmflg);
long shmctl(int shmid, int cmd, struct shmid_ds __user *buf);
long dup(unsigned int fildes);
long dup2(unsigned int oldfd, unsigned int newfd);
long pause(void);
long nanosleep(struct __kernel_timespec __user *rqtp, struct __kernel_timespec __user *rmtp);
long getitimer(int which, struct __kernel_old_itimerval __user *value);
long alarm(unsigned int seconds);
long setitimer(int which, struct __kernel_old_itimerval __user *value, struct __kernel_old_itimerval __user *ovalue);
long getpid(void);
long sendfile64(int out_fd, int in_fd, loff_t __user *offset, size_t count);
long socket(int, int, int);
long connect(int, struct sockaddr __user *, int);
long accept(int, struct sockaddr __user *, int __user *);
long sendto(int, void __user *, size_t, unsigned, struct sockaddr __user *, int);
long recvfrom(int, void __user *, size_t, unsigned, struct sockaddr __user *, int __user *);
long sendmsg(int fd, struct user_msghdr __user *msg, unsigned flags);
long recvmsg(int fd, struct user_msghdr __user *msg, unsigned flags);
long shutdown(int, int);
long bind(int, struct sockaddr __user *, int);
long listen(int, int);
long getsockname(int, struct sockaddr __user *, int __user *);
long getpeername(int, struct sockaddr __user *, int __user *);
long socketpair(int, int, int, int __user *);
long setsockopt(int fd, int level, int optname, char __user *optval, int optlen);
long getsockopt(int fd, int level, int optname, char __user *optval, int __user *optlen);
long setup(unsigned nr_reqs, aio_context_t __user *ctx);
long fork(void);
long vfork(void);
long execve(const char __user *filename, const char __user *const __user *argv, const char __user *const __user *envp);
long exit(int error_code);
long wait4(pid_t pid, int __user *stat_addr, int options, struct rusage __user *ru);
long kill(pid_t pid, int sig);
long newuname(struct new_utsname __user *name);
long semget(key_t key, int nsems, int semflg);
long semop(int semid, struct sembuf __user *sops, unsigned nsops);
long semctl(int semid, int semnum, int cmd, unsigned long arg);
long shmdt(char __user *shmaddr);
long msgget(key_t key, int msgflg);
long msgsnd(int msqid, struct msgbuf __user *msgp, size_t msgsz, int msgflg);
long msgrcv(int msqid, struct msgbuf __user *msgp, size_t msgsz, long msgtyp, int msgflg);
long msgctl(int msqid, int cmd, struct msqid_ds __user *buf);
long fcntl(unsigned int fd, unsigned int cmd, unsigned long arg);
long flock(unsigned int fd, unsigned int cmd);
long fsync(unsigned int fd);
long fdatasync(unsigned int fd);
long truncate(const char __user *path, long length);
long ftruncate(unsigned int fd, unsigned long length);
long getdents(unsigned int fd, struct linux_dirent __user *dirent, unsigned int count);
long getcwd(char __user *buf, unsigned long size);
long chdir(const char __user *filename);
long fchdir(unsigned int fd);
long rename(const char __user *oldname, const char __user *newname);
long mkdir(const char __user *pathname, umode_t mode);
long rmdir(const char __user *pathname);
long creat(const char __user *pathname, umode_t mode);
long link(const char __user *oldname, const char __user *newname);
long unlink(const char __user *pathname);
long symlink(const char __user *old, const char __user *new);
long readlink(const char __user *path, char __user *buf, int bufsiz);
long chmod(const char __user *filename, umode_t mode);
long fchmod(unsigned int fd, umode_t mode);
long chown(const char __user *filename, uid_t user, gid_t group);
long fchown(unsigned int fd, uid_t user, gid_t group);
long lchown(const char __user *filename, uid_t user, gid_t group);
long umask(int mask);
long gettimeofday(struct __kernel_old_timeval __user *tv, struct timezone __user *tz);
long getrlimit(unsigned int resource, struct rlimit __user *rlim);
long getrusage(int who, struct rusage __user *ru);
long sysinfo(struct sysinfo __user *info);
long times(struct tms __user *tbuf);
long ptrace(long request, long pid, unsigned long addr, unsigned long data);
long getuid(void);
long syslog(int type, char __user *buf, int len);
long getgid(void);
long setuid(uid_t uid);
long setgid(gid_t gid);
long geteuid(void);
long getegid(void);
long setpgid(pid_t pid, pid_t pgid);
long getppid(void);
long getpgrp(void);
long setsid(void);
long setreuid(uid_t ruid, uid_t euid);
long setregid(gid_t rgid, gid_t egid);
long getgroups(int gidsetsize, gid_t __user *grouplist);
long setgroups(int gidsetsize, gid_t __user *grouplist);
long setresuid(uid_t ruid, uid_t euid, uid_t suid);
long getresuid(uid_t __user *ruid, uid_t __user *euid, uid_t __user *suid);
long setresgid(gid_t rgid, gid_t egid, gid_t sgid);
long getresgid(gid_t __user *rgid, gid_t __user *egid, gid_t __user *sgid);
long getpgid(pid_t pid);
long setfsuid(uid_t uid);
long setfsgid(gid_t gid);
long getsid(pid_t pid);
long capget(cap_user_header_t header, cap_user_data_t dataptr);
long capset(cap_user_header_t header, const cap_user_data_t data);
long rt_sigpending(sigset_t __user *set, size_t sigsetsize);
long rt_sigtimedwait(const sigset_t __user *uthese, siginfo_t __user *uinfo, const struct __kernel_timespec __user *uts, size_t sigsetsize);
long rt_sigqueueinfo(pid_t pid, int sig, siginfo_t __user *uinfo);
long rt_sigsuspend(sigset_t __user *unewset, size_t sigsetsize);
long sigaltstack(const struct sigaltstack __user *uss, struct sigaltstack __user *uoss);
long utime(char __user *filename, struct utimbuf __user *times);
long mknod(const char __user *filename, umode_t mode, unsigned dev);
long personality(unsigned int personality);
long ustat(unsigned dev, struct ustat __user *ubuf);
long statfs(const char __user * path, struct statfs __user *buf);
long fstatfs(unsigned int fd, struct statfs __user *buf);
long sysfs(int option, unsigned long arg1, unsigned long arg2);
long getpriority(int which, int who);
long setpriority(int which, int who, int niceval);
long sched_setparam(pid_t pid, struct sched_param __user *param);
long sched_getparam(pid_t pid, struct sched_param __user *param);
long sched_setscheduler(pid_t pid, int policy, struct sched_param __user *param);
long sched_getscheduler(pid_t pid);
long sched_get_priority_max(int policy);
long sched_get_priority_min(int policy);
long sched_rr_get_interval(pid_t pid, struct __kernel_timespec __user *interval);
long mlock(unsigned long start, size_t len);
long munlock(unsigned long start, size_t len);
long mlockall(int flags);
long munlockall(void);
long vhangup(void);
long setup(unsigned nr_reqs, aio_context_t __user *ctx);
long pivot_root(const char __user *new_root, const char __user *put_old);
long ni_syscall(void);
long prctl(int option, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5);
long setup(unsigned nr_reqs, aio_context_t __user *ctx);
long adjtimex(struct __kernel_timex __user *txc_p);
long setrlimit(unsigned int resource, struct rlimit __user *rlim);
long chroot(const char __user *filename);
long sync(void);
long acct(const char __user *name);
long settimeofday(struct __kernel_old_timeval __user *tv, struct timezone __user *tz);
long mount(char __user *dev_name, char __user *dir_name, char __user *type, unsigned long flags, void __user *data);
long umount(char __user *name, int flags);
long swapon(const char __user *specialfile, int swap_flags);
long swapoff(const char __user *specialfile);
long reboot(int magic1, int magic2, unsigned int cmd, void __user *arg);
long sethostname(char __user *name, int len);
long setdomainname(char __user *name, int len);
long setup(unsigned nr_reqs, aio_context_t __user *ctx);
long ioperm(unsigned long from, unsigned long num, int on);
long init_module(void __user *umod, unsigned long len, const char __user *uargs);
long delete_module(const char __user *name_user, unsigned int flags);
long quotactl(unsigned int cmd, const char __user *special, qid_t id, void __user *addr);
long gettid(void);
long readahead(int fd, loff_t offset, size_t count);
long setxattr(const char __user *path, const char __user *name, const void __user *value, size_t size, int flags);
long lsetxattr(const char __user *path, const char __user *name, const void __user *value, size_t size, int flags);
long fsetxattr(int fd, const char __user *name, const void __user *value, size_t size, int flags);
long getxattr(const char __user *path, const char __user *name, void __user *value, size_t size);
long lgetxattr(const char __user *path, const char __user *name, void __user *value, size_t size);
long fgetxattr(int fd, const char __user *name, void __user *value, size_t size);
long listxattr(const char __user *path, char __user *list, size_t size);
long llistxattr(const char __user *path, char __user *list, size_t size);
long flistxattr(int fd, char __user *list, size_t size);
long removexattr(const char __user *path, const char __user *name);
long lremovexattr(const char __user *path, const char __user *name);
long fremovexattr(int fd, const char __user *name);
long tkill(pid_t pid, int sig);
long time(__kernel_old_time_t __user *tloc);
long futex(u32 __user *uaddr, int op, u32 val, const struct __kernel_timespec __user *utime, u32 __user *uaddr2, u32 val3);
long sched_setaffinity(pid_t pid, unsigned int len, unsigned long __user *user_mask_ptr);
long sched_getaffinity(pid_t pid, unsigned int len, unsigned long __user *user_mask_ptr);
long setup(unsigned nr_reqs, aio_context_t __user *ctx);
long destroy(aio_context_t ctx);
long getevents(aio_context_t ctx_id, long min_nr, long nr, struct io_event __user *events, struct __kernel_timespec __user *timeout);
long submit(aio_context_t, long, struct iocb __user * __user *);
long cancel(aio_context_t ctx_id, struct iocb __user *iocb, struct io_event __user *result);
long epoll_create(int size);
long remap_file_pages(unsigned long start, unsigned long size, unsigned long prot, unsigned long pgoff, unsigned long flags);
long getdents64(unsigned int fd, struct linux_dirent64 __user *dirent, unsigned int count);
long set_tid_address(int __user *tidptr);
long restart_syscall(void);
long semtimedop(int semid, struct sembuf __user *sops, unsigned nsops, const struct __kernel_timespec __user *timeout);
long fadvise64(int fd, loff_t offset, size_t len, int advice);
long timer_create(clockid_t which_clock, struct sigevent __user *timer_event_spec, timer_t __user * created_timer_id);
long timer_settime(timer_t timer_id, int flags, const struct __kernel_itimerspec __user *new_setting, struct __kernel_itimerspec __user *old_setting);
long timer_gettime(timer_t timer_id, struct __kernel_itimerspec __user *setting);
long timer_getoverrun(timer_t timer_id);
long timer_delete(timer_t timer_id);
long clock_settime(clockid_t which_clock, const struct __kernel_timespec __user *tp);
long clock_gettime(clockid_t which_clock, struct __kernel_timespec __user *tp);
long clock_getres(clockid_t which_clock, struct __kernel_timespec __user *tp);
long clock_nanosleep(clockid_t which_clock, int flags, const struct __kernel_timespec __user *rqtp, struct __kernel_timespec __user *rmtp);
long exit_group(int error_code);
long epoll_wait(int epfd, struct epoll_event __user *events, int maxevents, int timeout);
long epoll_ctl(int epfd, int op, int fd, struct epoll_event __user *event);
long tgkill(pid_t tgid, pid_t pid, int sig);
long utimes(char __user *filename, struct __kernel_old_timeval __user *utimes);
long mbind(unsigned long start, unsigned long len, unsigned long mode, const unsigned long __user *nmask, unsigned long maxnode, unsigned flags);
long set_mempolicy(int mode, const unsigned long __user *nmask, unsigned long maxnode);
long get_mempolicy(int __user *policy, unsigned long __user *nmask, unsigned long maxnode, unsigned long addr, unsigned long flags);
long mq_open(const char __user *name, int oflag, umode_t mode, struct mq_attr __user *attr);
long mq_unlink(const char __user *name);
long mq_timedsend(mqd_t mqdes, const char __user *msg_ptr, size_t msg_len, unsigned int msg_prio, const struct __kernel_timespec __user *abs_timeout);
long mq_timedreceive(mqd_t mqdes, char __user *msg_ptr, size_t msg_len, unsigned int __user *msg_prio, const struct __kernel_timespec __user *abs_timeout);
long mq_notify(mqd_t mqdes, const struct sigevent __user *notification);
long mq_getsetattr(mqd_t mqdes, const struct mq_attr __user *mqstat, struct mq_attr __user *omqstat);
long kexec_load(unsigned long entry, unsigned long nr_segments, struct kexec_segment __user *segments, unsigned long flags);
long waitid(int which, pid_t pid, struct siginfo __user *infop, int options, struct rusage __user *ru);
long add_key(const char __user *_type, const char __user *_description, const void __user *_payload, size_t plen, key_serial_t destringid);
long request_key(const char __user *_type, const char __user *_description, const char __user *_callout_info, key_serial_t destringid);
long keyctl(int cmd, unsigned long arg2, unsigned long arg3, unsigned long arg4, unsigned long arg5);
long ioprio_set(int which, int who, int ioprio);
long ioprio_get(int which, int who);
long inotify_init(void);
long inotify_add_watch(int fd, const char __user *path, u32 mask);
long inotify_rm_watch(int fd, __s32 wd);
long migrate_pages(pid_t pid, unsigned long maxnode, const unsigned long __user *from, const unsigned long __user *to);
long openat(int dfd, const char __user *filename, int flags, umode_t mode);
long mkdirat(int dfd, const char __user * pathname, umode_t mode);
long mknodat(int dfd, const char __user * filename, umode_t mode, unsigned dev);
long fchownat(int dfd, const char __user *filename, uid_t user, gid_t group, int flag);
long futimesat(int dfd, const char __user *filename, struct __kernel_old_timeval __user *utimes);
long newfstatat(int dfd, const char __user *filename, struct stat __user *statbuf, int flag);
long unlinkat(int dfd, const char __user * pathname, int flag);
long renameat(int olddfd, const char __user * oldname, int newdfd, const char __user * newname);
long linkat(int olddfd, const char __user *oldname, int newdfd, const char __user *newname, int flags);
long symlinkat(const char __user * oldname, int newdfd, const char __user * newname);
long readlinkat(int dfd, const char __user *path, char __user *buf, int bufsiz);
long fchmodat(int dfd, const char __user * filename, umode_t mode);
long faccessat(int dfd, const char __user *filename, int mode);
long pselect6(int, fd_set __user *, fd_set __user *, fd_set __user *, struct __kernel_timespec __user *, void __user *);
long ppoll(struct pollfd __user *, unsigned int, struct __kernel_timespec __user *, const sigset_t __user *, size_t);
long unshare(unsigned long unshare_flags);
long set_robust_list(struct robust_list_head __user *head, size_t len);
long get_robust_list(int pid, struct robust_list_head __user * __user *head_ptr, size_t __user *len_ptr);
long splice(int fd_in, loff_t __user *off_in, int fd_out, loff_t __user *off_out, size_t len, unsigned int flags);
long tee(int fdin, int fdout, size_t len, unsigned int flags);
long sync_file_range(int fd, loff_t offset, loff_t nbytes, unsigned int flags);
long vmsplice(int fd, const struct iovec __user *iov, unsigned long nr_segs, unsigned int flags);
long move_pages(pid_t pid, unsigned long nr_pages, const void __user * __user *pages, const int __user *nodes, int __user *status, int flags);
long utimensat(int dfd, const char __user *filename, struct __kernel_timespec __user *utimes, int flags);
long epoll_pwait(int epfd, struct epoll_event __user *events, int maxevents, int timeout, const sigset_t __user *sigmask, size_t sigsetsize);
long signalfd(int ufd, sigset_t __user *user_mask, size_t sizemask);
long timerfd_create(int clockid, int flags);
long eventfd(unsigned int count);
long fallocate(int fd, int mode, loff_t offset, loff_t len);
long timerfd_settime(int ufd, int flags, const struct __kernel_itimerspec __user *utmr, struct __kernel_itimerspec __user *otmr);
long timerfd_gettime(int ufd, struct __kernel_itimerspec __user *otmr);
long accept4(int, struct sockaddr __user *, int __user *, int);
long signalfd4(int ufd, sigset_t __user *user_mask, size_t sizemask, int flags);
long eventfd2(unsigned int count, int flags);
long epoll_create1(int flags);
long dup3(unsigned int oldfd, unsigned int newfd, int flags);
long pipe2(int __user *fildes, int flags);
long inotify_init1(int flags);
long preadv(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h);
long pwritev(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h);
long rt_tgsigqueueinfo(pid_t tgid, pid_t pid, int sig, siginfo_t __user *uinfo);
long perf_event_open( struct perf_event_attr __user *attr_uptr, pid_t pid, int cpu, int group_fd, unsigned long flags);
long recvmmsg(int fd, struct mmsghdr __user *msg, unsigned int vlen, unsigned flags, struct __kernel_timespec __user *timeout);
long fanotify_init(unsigned int flags, unsigned int event_f_flags);
long fanotify_mark(int fanotify_fd, unsigned int flags, u64 mask, int fd, const char __user *pathname);
long prlimit64(pid_t pid, unsigned int resource, const struct rlimit64 __user *new_rlim, struct rlimit64 __user *old_rlim);
long name_to_handle_at(int dfd, const char __user *name, struct file_handle __user *handle, int __user *mnt_id, int flag);
long open_by_handle_at(int mountdirfd, struct file_handle __user *handle, int flags);
long clock_adjtime(clockid_t which_clock, struct __kernel_timex __user *tx);
long syncfs(int fd);
long sendmmsg(int fd, struct mmsghdr __user *msg, unsigned int vlen, unsigned flags);
long setns(int fd, int nstype);
long getcpu(unsigned __user *cpu, unsigned __user *node, struct getcpu_cache __user *cache);
long process_vm_readv(pid_t pid, const struct iovec __user *lvec, unsigned long liovcnt, const struct iovec __user *rvec, unsigned long riovcnt, unsigned long flags);
long process_vm_writev(pid_t pid, const struct iovec __user *lvec, unsigned long liovcnt, const struct iovec __user *rvec, unsigned long riovcnt, unsigned long flags);
long kcmp(pid_t pid1, pid_t pid2, int type, unsigned long idx1, unsigned long idx2);
long finit_module(int fd, const char __user *uargs, int flags);
long sched_setattr(pid_t pid, struct sched_attr __user *attr, unsigned int flags);
long sched_getattr(pid_t pid, struct sched_attr __user *attr, unsigned int size, unsigned int flags);
long renameat2(int olddfd, const char __user *oldname, int newdfd, const char __user *newname, unsigned int flags);
long seccomp(unsigned int op, unsigned int flags, void __user *uargs);
long getrandom(char __user *buf, size_t count, unsigned int flags);
long memfd_create(const char __user *uname_ptr, unsigned int flags);
long kexec_file_load(int kernel_fd, int initrd_fd, unsigned long cmdline_len, const char __user *cmdline_ptr, unsigned long flags);
long bpf(int cmd, union bpf_attr *attr, unsigned int size);
long execveat(int dfd, const char __user *filename, const char __user *const __user *argv, const char __user *const __user *envp, int flags);
long userfaultfd(int flags);
long membarrier(int cmd, unsigned int flags, int cpu_id);
long mlock2(unsigned long start, size_t len, int flags);
long copy_file_range(int fd_in, loff_t __user *off_in, int fd_out, loff_t __user *off_out, size_t len, unsigned int flags);
long preadv2(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h, rwf_t flags);
long pwritev2(unsigned long fd, const struct iovec __user *vec, unsigned long vlen, unsigned long pos_l, unsigned long pos_h, rwf_t flags);
long pkey_mprotect(unsigned long start, size_t len, unsigned long prot, int pkey);
long pkey_alloc(unsigned long flags, unsigned long init_val);
long pkey_free(int pkey);
long statx(int dfd, const char __user *path, unsigned flags, unsigned mask, struct statx __user *buffer);
long pgetevents(aio_context_t ctx_id, long min_nr, long nr, struct io_event __user *events, struct __kernel_timespec __user *timeout, const struct __aio_sigset *sig);
long rseq(struct rseq __user *rseq, uint32_t rseq_len, int flags, uint32_t sig);
long pidfd_send_signal(int pidfd, int sig, siginfo_t __user *info, unsigned int flags);
long uring_setup(u32 entries, struct io_uring_params __user *p);
long uring_enter(unsigned int fd, u32 to_submit, u32 min_complete, u32 flags, const void __user *argp, size_t argsz);
long uring_register(unsigned int fd, unsigned int op, void __user *arg, unsigned int nr_args);
long open_tree(int dfd, const char __user *path, unsigned flags);
long move_mount(int from_dfd, const char __user *from_path, int to_dfd, const char __user *to_path, unsigned int ms_flags);
long fsopen(const char __user *fs_name, unsigned int flags);
long fsconfig(int fs_fd, unsigned int cmd, const char __user *key, const void __user *value, int aux);
long fsmount(int fs_fd, unsigned int flags, unsigned int ms_flags);
long fspick(int dfd, const char __user *path, unsigned int flags);
long pidfd_open(pid_t pid, unsigned int flags);
long clone3(struct clone_args __user *uargs, size_t size);
long close_range(unsigned int fd, unsigned int max_fd, unsigned int flags);
long openat2(int dfd, const char __user *filename, struct open_how *how, size_t size);
long pidfd_getfd(int pidfd, int fd, unsigned int flags);
long faccessat2(int dfd, const char __user *filename, int mode, int flags);
long process_madvise(int pidfd, const struct iovec __user *vec, size_t vlen, int behavior, unsigned int flags);
long epoll_pwait2(int epfd, struct epoll_event __user *events, int maxevents, const struct __kernel_timespec __user *timeout, const sigset_t __user *sigmask, size_t sigsetsize);
long mount_setattr(int dfd, const char __user *path, unsigned int flags, struct mount_attr __user *uattr, size_t usize);
long quotactl_fd(unsigned int fd, unsigned int cmd, qid_t id, void __user *addr);
long landlock_create_ruleset(const struct landlock_ruleset_attr __user *attr, size_t size, __u32 flags);
long landlock_add_rule(int ruleset_fd, enum landlock_rule_type rule_type, const void __user *rule_attr, __u32 flags);
long landlock_restrict_self(int ruleset_fd, __u32 flags);
long memfd_secret(unsigned int flags);
long process_mrelease(int pidfd, unsigned int flags);
long futex_waitv(struct futex_waitv *waiters, unsigned int nr_futexes, unsigned int flags, struct __kernel_timespec __user *timeout, clockid_t clockid);
long set_mempolicy_home_node(unsigned long start, unsigned long len, unsigned long home_node, unsigned long flags);
long setup(unsigned nr_reqs, aio_context_t __user *ctx);
long setup(unsigned nr_reqs, aio_context_t __user *ctx);
long setup(unsigned nr_reqs, aio_context_t __user *ctx);
long setup(unsigned nr_reqs, aio_context_t __user *ctx);
long setup(unsigned nr_reqs, aio_context_t __user *ctx);
long setup(unsigned nr_reqs, aio_context_t __user *ctx);
long setup(unsigned nr_reqs, aio_context_t __user *ctx);
long setup(unsigned nr_reqs, aio_context_t __user *ctx);
long setup(unsigned nr_reqs, aio_context_t __user *ctx);
long setup(unsigned nr_reqs, aio_context_t __user *ctx);
long setup(unsigned nr_reqs, aio_context_t __user *ctx);
